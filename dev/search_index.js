var documenterSearchIndex = {"docs":
[{"location":"catalyst/#Usage-Hints","page":"Usage Hints","title":"Usage Hints","text":"","category":"section"},{"location":"catalyst/#Catalyst","page":"Usage Hints","title":"Catalyst","text":"","category":"section"},{"location":"catalyst/","page":"Usage Hints","title":"Usage Hints","text":"TikhonovFenichelReductions.jl can use reaction networks defined with Catalyst.jl as input as of version v0.2.7.  Note, that this is implemented as an extension and is therefore only supported by Julia 1.9+ (this prevents unnecessary precompilation when Catalyst.jl is not loaded). If you cannot use an up to date version of Julia, you can simply copy the few lines of code in ext/CatalystExt.jl to overload the constructor for a ReductionProblem. ","category":"page"},{"location":"catalyst/","page":"Usage Hints","title":"Usage Hints","text":"Here is an example:","category":"page"},{"location":"catalyst/","page":"Usage Hints","title":"Usage Hints","text":"using Catalyst \nusing TikhonovFenichelReductions\n\n# define enzyme kinetics as reaction network\nrn = @reaction_network begin\n  @parameters e₀ k₁ k₋₁ k₂\n  @species S(t) C(t) \n  k₁*e₀, S --> C \n  k₁, S+C --> 2S\n  k₋₁, C --> S \n  k₂, C --> 0\nend\n\n# Make `ReductionProblem`\nproblem_catalyst = ReductionProblem(rn, 1)","category":"page"},{"location":"catalyst/#LaTeX","page":"Usage Hints","title":"LaTeX","text":"","category":"section"},{"location":"catalyst/","page":"Usage Hints","title":"Usage Hints","text":"All of the print_... functions can be used with the keyword latex=true to produce LaTeX code (this relies on Latexify.jl internally). The output strings can also be written to arbitrary IO streams, which allows to write directly to a file (e.g. to include the ODE definition from a main.tex).","category":"page"},{"location":"catalyst/","page":"Usage Hints","title":"Usage Hints","text":"print_system(problem_catalyst; latex=true)","category":"page"},{"location":"gettingstarted/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"gettingstarted/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Run","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"add https://github.com/jo-ap/tikhonovfenichelreductions.jl","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"in Julia package Mode.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"note: Installation\nTikhonovFenichelReductions.jl relies on Oscar.jl, which requieres at least 6GB of free memory for the installation (the Oscar-Team recommends at least 16GB). On Windows, Oscar.jl needs to be installed using the Windows Subsystem for Linux (WSL). Instructions can be found in the documentation.","category":"page"},{"location":"gettingstarted/#Example","page":"Getting Started","title":"Example","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Here we consider the derivation of the Rosenzweig-MacArthur model as a reduction from a three dimensional system as demonstrated in [7]. ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Load the package and its dependency Oscar.jl.  Note that loading Oscar is optional, but results in prettier printing of types and imports useful functions.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"using TikhonovFenichelReductions\nusing Oscar # optional","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Define the components, parameters and the RHS of the system. ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"# components\nx = [\"B\", \"S\", \"H\"]\n\n# parameters\np = [\"α\", \"β\", \"γ\", \"δ\", \"η\", \"ρ\"]\n\n# RHS of ODE system ẋ = f(x, p), where f is polynomial in x and p\nfunction f(x, p)\n  B, S, H = x\n  α, β, γ, δ, η, ρ = p\n  return [\n    ρ*B*(1-B) - α*B*H,\n    -η*S + γ*B*H,\n    β*S- δ*H + η*S - γ*B*H\n  ]\nend","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Initialize the problem with desired dimension of the reduced system","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"# dimension of the reduced system\ns = 2\n\n# create problem\nproblem = ReductionProblem(f, x, p, s)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Compute all slow-fast separations that are TFPVs by using necessary conditions for the existence of a reduction.  This returns a vector of boolean indices for each TFPV candidate, where 0 corresponds to a small and 1 to a large parameter. In addition, we obtain the generators of the irreducible components of the affine variety ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"mathcalV_mathbbC(f(cdotpi^star)) = xinmathbbC^n mid forall i  f_i(xpi^star)=0","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"and their dimension, where pi^star is defined by the corresponding slow-fast separation in sf_separation.  This is information is stored using the type Variety. Note that later have to check manually whether the variety taken in mathbbR^n has the same dimension (i.e. if there exists a real non-singular point), which then at least locally renders this variety a manifold.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"tfpvs, varieties = tfpvs_and_varieties(problem)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"You can also get all general TFPVs by computing a Gröbner basis G that reflects necessary conditions on the parameters of the system.  Note that this is potentially a very computationally intensive task.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"G = tfpvs_groebner(problem)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Show the results: All possible slow-fast separation of rates ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"print_tfpvs(problem, tfpvs)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"and the corresponding irreducible components containing the slow manifold and their Krull dimension","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"print_varieties(varieties)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"For further use, we need to make the variables (the system components and parameters) available in the Main namespace. Then, we can compute the reduction corresponding to TFPV 15, which is the Rosenzweig-MacArthur model.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"B, S, H = system_components(problem)\nα, β, γ, δ, η, ρ = system_parameters(problem)\n\n# instantiate reduction \nreduction = Reduction(problem, tfpvs[15])","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"To find the slow manifold, we can consider the affine variety defined by the vanishing of","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"varieties[15][1].gens_R","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"which has (complex) dimension","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"varieties[15][1].dim","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"as a variety.  We can see, that there is only one irreducible component, so the slow manifold is  mathcalV_mathbbR(H) = (BS0) mid BS in mathbbR with dimension s=2 as desired.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"We need to define the slow manifold explicitly in order to check whether the reduction exists.  This also allows us to substitute the variables that got reduced according to the slow manifold in the reduced system.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"set_manifold!(reduction, [B, S, 0])","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Note that in this case any generic point on the affine variety is non-singular and can be chosen.   Thus, we don't have to call set_point! to set a non-singular point explicitly on whose neighbourhood the reduction exists.  This also means dim mathcalV_mathbbC(f(cdotpi^star)) = dim mathcalV_mathbbR(f(cdotpi^star)) locally for the irreducible component containing the non-singular point.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Lastly, we define a product decomposition f(cdotpi^star) = P cdot psi with mathcalV(psi) = mathcalV(f(cdotpi^star)). This can be done by specifying only psi using the generators of the irreducible component of mathcalV(f^(0)) that corresponds to the slow manifold. Then, the methods automatically computes P, which relies on having exactly r generators of the variety corresponding to the slow manifold.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"set_decomposition!(reduction, varieties[15][1])","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"In most cases, this method should work, but you can also manually set P and Psi.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Now we can compute and show the reduced system.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"compute_reduction!(reduction)\nprint_reduced_system(reduction)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"This updates the reduction object, which now contains the reduced system before and after variables are substituted as defined by the slow manifold. You can see how the reduction object is updated:","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"reduction","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The first two components of reduction.g define the reduced system and can be rewritten as ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"beginalign*\nfracdBdt = rho B (1 - B) - alpha(eta + beta) S fracBdelta + gamma B \nfracdSdt = -eta S + gamma(eta + beta) S fracBdelta + gamma B \nendalign*","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"which is exactly the Rosenzweig-MacArthur model.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"The slow manifold is attractive if all non-zero eigenvalues of the Jacobian of f(cdot pi^star) at the non-singular x0 point have negative real part.","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"# pretty-print Jacobian at x0\nJ = jacobian_tfpv_at_x0(reduction)\nshow(stdout, \"text/plain\", J)","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"Thus, the full system converges to the reduction as varepsilon to 0 if  B geq 0. ","category":"page"},{"location":"gettingstarted/#Bulk-Computations","page":"Getting Started","title":"Bulk Computations","text":"","category":"section"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"TikhonovFenichelReductions.jl has methods that simplify the computation of multiple reductions with the same manifold, since typically many different TFPVs share the same slow manifold. Additionally, the function get_explicit_manifold implements a heuristic  to find an explicit parametric description of the slow manifold. Thus, in simple enough cases, the computation of all reductions is fully automatic. ","category":"page"},{"location":"gettingstarted/","page":"Getting Started","title":"Getting Started","text":"all_V = unique_varieties(problem, varieties)\nall_M = [get_explicit_manifold(problem, V) for V in all_V] \n\n# get reduction and indices of varieties that correspond to unique slow manifolds\nall_reductions, idx_M = compute_all_reductions(problem, tfpvs, varieties, [m[1] for m in all_M]);\n\nall_reductions[15][1]","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Finding-Tikhonov-Fenichel-Parameter-Values","page":"API","title":"Finding Tikhonov-Fenichel Parameter Values","text":"","category":"section"},{"location":"api/#TikhonovFenichelReductions.system_components-Tuple{ReductionProblem}","page":"API","title":"TikhonovFenichelReductions.system_components","text":"system_components(\n    problem::ReductionProblem\n) -> Vector{Nemo.QQMPolyRingElem}\n\n\nConvenience function to get components of ODE system from instance of ReductionProblem. \n\nSee also: ReductionProblem, system_parameters\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.system_parameters-Tuple{ReductionProblem}","page":"API","title":"TikhonovFenichelReductions.system_parameters","text":"system_parameters(\n    problem::ReductionProblem\n) -> Vector{Nemo.QQMPolyRingElem}\n\n\nConvenience function to get parameters of ODE system from instance of ReductionProblem. \n\nSee also: ReductionProblem, system_components\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.tfpvs_and_varieties-Tuple{ReductionProblem}","page":"API","title":"TikhonovFenichelReductions.tfpvs_and_varieties","text":"tfpvs_and_varieties(\n    problem::ReductionProblem\n) -> Tuple{Vector{Vector{Bool}}, Vector{Vector{Variety}}}\n\n\nFind all slow-fast separations π⁺ that are TFPVs by using the necessary conditions\n\nthe affine variety V(f0) contains an irreducible component Y of dimension s \nthe s-th coefficient of the characteristic polynomial of D₁f(x,π⁺) is non-zero for x∈Y\n\nDescription\n\nThe irreducible components are obtained by computing a minimal primary decomposition.  The Jacobian at a point in an irreducible component Y is constructed symbolically by computing normal forms with respect to a Gröbner basis G, s.t. G generates the vanishing ideal of Y. To obtain all general TFPVs and not just slow-fast separations, one can use the function tfpvs_groebner.\n\nSee also: tfpvs_groebner, print_results, print_tfpvs, print_varieties\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.tfpvs_groebner-Tuple{ReductionProblem}","page":"API","title":"TikhonovFenichelReductions.tfpvs_groebner","text":"tfpvs_groebner(\n    problem::ReductionProblem\n) -> Vector{Nemo.QQMPolyRingElem}\n\n\nUse the necessary conditions imposed by the RHS of the polynomial ODE System and its Jacobian to filter out TFPV candidates. All TFPVs must result in the vanishing of the returned set of polynomials.\n\nDescription\n\nIf π⁺ is a TFPV yielding a reduction onto an s-dimensional slow manifold, there exist a point x₀, such that \n\nf(x₀,π⁺)=0\nfor any k>s the determinants of all k×k minors of D₁f(x₀,π⁺) vanish\n\nThese properties can be used to filter out possible TFPV candidates.\n\nWe are interested in partial solutions of the system of polynomials defined by the conditions above. In particular, we only consider conditions on the parameters, since there might be multiple slow manifolds and reductions. Thus, we eliminate the dynamic variables from the ideal generated by the polynomial conditions above. This function computes a generating set for this elimination ideal and all TFPVs lie in its vanishing set.\n\nSee also: tfpvs_and_varieties \n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.ReductionProblem","page":"API","title":"TikhonovFenichelReductions.ReductionProblem","text":"Type that defines a Tikhonov-Fenichel reduction problem, i.e. a polynomial ODE system, for which all slow-fast separations of rates yielding a reduction onto dimension s are considered. \n\nThe type QQMPolyRingElem is used in Oscar.jl to represent elements of a polynomial ring; here we this is ℚ[p,x].\n\nFields\n\nf::Vector{Nemo.QQMPolyRingElem}: RHS of ODE system as a vector of polynomials\nx::Vector{Nemo.QQMPolyRingElem}: Vector of dynamic variables\np::Vector{Nemo.QQMPolyRingElem}: Vector of all parameters\ns::Int64: Dimension of reduced system\np_sf::Vector{Nemo.QQMPolyRingElem}: Vector of parameters that may be small (all others are considered fixed)\nidx_slow_fast::Vector{Bool}: Boolean index, such that p_sf=p[idx_slow_fast]\nJ::AbstractAlgebra.Generic.MatSpaceElem{Nemo.QQMPolyRingElem}: Jacobian of f wrt x\n_f::Function: RHS of ODE system as a Julia function with signature _f(x,p)\n_F::AbstractAlgebra.Generic.FracField{Nemo.QQMPolyRingElem}: Fraction field over R\n_Fp::AbstractAlgebra.Generic.RationalFunctionField{Nemo.QQFieldElem, Nemo.QQMPolyRingElem}: Field of rational functions in the parameters\n_Rx::AbstractAlgebra.MPolyRing{AbstractAlgebra.Generic.RationalFunctionFieldElem{Nemo.QQFieldElem, Nemo.QQMPolyRingElem}}: Polynomial ring in x over the field Fp\n_f_Rx::Vector{AbstractAlgebra.Generic.MPoly{AbstractAlgebra.Generic.RationalFunctionFieldElem{Nemo.QQFieldElem, Nemo.QQMPolyRingElem}}}: RHS of ODE system in polynomial ring Rx\n_x_Rx::Vector{AbstractAlgebra.Generic.MPoly{AbstractAlgebra.Generic.RationalFunctionFieldElem{Nemo.QQFieldElem, Nemo.QQMPolyRingElem}}}: Vector of dynamic variables in polynomial ring Rx\n\n\n\n\n\n","category":"type"},{"location":"api/#TikhonovFenichelReductions.ReductionProblem-Union{Tuple{T}, Tuple{Function, Vector{T}, Vector{T}, Int64}} where T<:Union{String, Symbol}","page":"API","title":"TikhonovFenichelReductions.ReductionProblem","text":"ReductionProblem(\n    f::Function,\n    x::Array{T<:Union{String, Symbol}, 1},\n    p::Array{T<:Union{String, Symbol}, 1},\n    s::Int64;\n    idx_slow_fast\n) -> ReductionProblem\n\n\nConstructor for ReductionProblem Type.\n\nArguments\n\nf(x,p)::Function: Julia function defining the RHS of the ODE system \nx::Vector{String}: Vector of dynamic variables \np::Vector{String}: Vector of all parameters\ns::Int: Dimension of reduced system \nidx_slow_fast::Vector{Bool}: Boolean index for all rates that are either small or large (all others are considered fixed)\n\nDescription\n\nThis function is used to set up the problem of finding Tikhonov-Fenichel Parameter Values for dimension s. The names of all variables and parameters in the system are parsed to appropriate types in Oscar.jl, so that the necessary conditions for the existence of a reduction onto an s-dimensional slow manifold can be evaluated.\n\nSee also: tfpvs_and_varieties, tfpvs_groebner\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.Variety","page":"API","title":"TikhonovFenichelReductions.Variety","text":"Type that holds information on the slow manifold as an irreducible component of the variety V(f0).\n\nideal::Oscar.MPolyIdeal: associated ideal in Rx\ngens_R::Vector{Nemo.QQMPolyRingElem}: generators of associated ideal parsed to R\ngroebner_basis::Vector{AbstractAlgebra.Generic.MPoly{AbstractAlgebra.Generic.RationalFunctionFieldElem{Nemo.QQFieldElem, Nemo.QQMPolyRingElem}}}: groebner basis of associated ideal in Rx\ngroebner_basis_R::Vector{Nemo.QQMPolyRingElem}: groebner basis of associated ideal parsed to R\nT::AbstractAlgebra.Generic.MatSpaceElem{AbstractAlgebra.Generic.MPoly{AbstractAlgebra.Generic.RationalFunctionFieldElem{Nemo.QQFieldElem, Nemo.QQMPolyRingElem}}}: Matrix T, such that gens(I)*T=groebner_basis\ndim::Int64: Krull dimension of associated ideal\n\n\n\n\n\n","category":"type"},{"location":"api/#Computing-a-Tikhonov-Fenichel-Reduction","page":"API","title":"Computing a Tikhonov-Fenichel Reduction","text":"","category":"section"},{"location":"api/#TikhonovFenichelReductions.compute_reduction!-Tuple{Reduction}","page":"API","title":"TikhonovFenichelReductions.compute_reduction!","text":"compute_reduction!(reduction::Reduction) -> Bool\n\n\nCompute the reduced system after the slow manifold, non-singular point and product decomposition have been set successfully.\n\nThe function returns true if the reduced system was computed successfully. The reduction in raw form, i.e. before substituting the variables x according to the slow manifold is set reduction.g_raw while the s-dimensional reduction on the slow manifold is given by reduction.g. A safe getter function for this is get_reduced_system(reduction::Reduction).\n\nSee also: set_manifold!, set_decomposition!, set_point!, compute_all_reductions, Reduction, print_reduced_system\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.get_explicit_manifold-Tuple{ReductionProblem, Variety}","page":"API","title":"TikhonovFenichelReductions.get_explicit_manifold","text":"get_explicit_manifold(\n    problem::ReductionProblem,\n    variety::Variety\n) -> Tuple{Any, Any}\n\n\nHeuristic approach to get an explicit (i.e. parameterised) representation of the slow manifold from a variety. The function returns the (attempted) expicit manifold together with a boolean value indicating whether the manifold could be computed automatically.\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.get_varieties-Tuple{ReductionProblem, Vector{Bool}}","page":"API","title":"TikhonovFenichelReductions.get_varieties","text":"get_varieties(\n    problem::ReductionProblem,\n    sf_separation::Vector{Bool}\n) -> Tuple{Bool, Vector{Oscar.MPolyIdeal{AbstractAlgebra.Generic.MPoly{AbstractAlgebra.Generic.RationalFunctionFieldElem{Nemo.QQFieldElem, Nemo.QQMPolyRingElem}}}}, Union{Vector{Any}, Vector{Int64}, Vector{Nemo.NegInf}}}\n\n\nCompute the irreducible components of V(f0) and their dimensions for a given TFPV candidate.  If there exist a reduction, the corresponding slow manifold must be contained in one of these components.\n\nArguments\n\nproblem: Reduction problem type holding information on system and dimension of reduction.\nsf_separation: Boolean index indicating slow-fast separation of rates (0: small, 1: large).\n\nDescription\n\nThis function can be used if one wants to check whether a particular slow-fast separation of rates yields a reduction for any dimension. If the dimension of an irreducible component of V(f0) differs from what was defined with ReductionProblem, the constructor Reduction can be called with the additional argument s specifying the dimension.\n\nSee also: Reduction\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.jacobian_tfpv_at_x0-Tuple{Reduction}","page":"API","title":"TikhonovFenichelReductions.jacobian_tfpv_at_x0","text":"jacobian_tfpv_at_x0(\n    reduction::Reduction\n) -> AbstractAlgebra.Generic.MatSpaceElem{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}\n\n\nReturn the Jacobian D₁f(x₀,π⁺) at the point x₀ on the slow manifold for a TFPV π⁺.\n\nSee also: Reduction, set_point!, set_manifold!\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.jacobian_tfpv_on_manifold-Tuple{Reduction}","page":"API","title":"TikhonovFenichelReductions.jacobian_tfpv_on_manifold","text":"jacobian_tfpv_on_manifold(\n    reduction::Reduction\n) -> AbstractAlgebra.Generic.MatSpaceElem{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}\n\n\nReturn the Jacobian D₁f(x,π⁺) at a generic point x on the slow manifold for a TFPV π⁺.\n\nSee also: Reduction, set_manifold!\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.set_decomposition!-Tuple{Reduction, Union{AbstractAlgebra.Generic.MatSpaceElem, VecOrMat}, Union{AbstractAlgebra.Generic.MatSpaceElem, Vector{Nemo.QQMPolyRingElem}}}","page":"API","title":"TikhonovFenichelReductions.set_decomposition!","text":"set_decomposition!(\n    reduction::Reduction,\n    P::Union{AbstractAlgebra.Generic.MatSpaceElem, VecOrMat},\n    Psi::Union{AbstractAlgebra.Generic.MatSpaceElem, Vector{Nemo.QQMPolyRingElem}}\n) -> Bool\n\n\nSet product decomposition f0=P⋅Psi locally satisfying V(f0)=V(Psi), where P is a matrix of rational functions  and Psi is a vector of polynomials.\n\nSee also: set_manifold! set_point! Reduction\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.set_decomposition!-Tuple{Reduction, Union{Variety, Vector{Nemo.QQMPolyRingElem}}}","page":"API","title":"TikhonovFenichelReductions.set_decomposition!","text":"set_decomposition!(\n    reduction::Reduction,\n    Psi::Union{Variety, Vector{Nemo.QQMPolyRingElem}}\n) -> Bool\n\n\nTry to automatically compute matrix of rational functions P from given vector of polynomials Psi, such that f0=P⋅Psi and V(f0)=V(Psi) holds locally.\n\nNOTE: This always works if the drop in dimension r=n-s=1, but is experimental for r>1\n\nDescription\n\nPsi can be chosen from r algebraically independent entries of f0.  Practically, one can use the generators of the ideals defining the irreducible components of V(f0) as entries for Psi (possibly rewriting the rational equations as polynomials by multiplying appropriately with parameters occurring in a denominator).\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.set_manifold!-Tuple{Reduction, AbstractVector}","page":"API","title":"TikhonovFenichelReductions.set_manifold!","text":"set_manifold!(\n    reduction::Reduction,\n    M::AbstractVector\n) -> Bool\n\n\nSet the slow manifold by defining the values of the components of the system. Note that M must be defined as a vector with the same length as the system's components, i.e. reduction.problem.x.\n\nSee also: Reduction, set_decomposition!, set_point!\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.set_point!-Tuple{Reduction, AbstractVector}","page":"API","title":"TikhonovFenichelReductions.set_point!","text":"set_point!(reduction::Reduction, x0::AbstractVector) -> Bool\n\n\nSet non-singular point on irreducible component of V(f0) corresponding to the slow manifold.  Typically, this can be done automatically by setting the slow manifold.\n\nSee also: set_manifold!, set_decomposition!, Reduction\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.Reduction","page":"API","title":"TikhonovFenichelReductions.Reduction","text":"Type that holds all information to compute a Tikhonov-Fenichel reduction for a given slow-fast separation of rates.\n\nFields\n\nproblem::ReductionProblem: information on input system\nsf_separation::Vector{Bool}: slow-fast separation (0: slow, 1: fast)\n_p::Vector{Nemo.QQMPolyRingElem}: Parameters of the system where small ones are set to 0\nf0::Vector{Nemo.QQMPolyRingElem}: RHS of system as vector with elements of ring R\nf1::Vector{Nemo.QQMPolyRingElem}: Slow part of the system\nDf0::AbstractAlgebra.Generic.MatSpaceElem{Nemo.QQMPolyRingElem}: Jacobian of f0\nDf0_at_x0::AbstractAlgebra.Generic.MatSpaceElem{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}: Jacobian of f0 at the non-singular point x0\nT::AbstractAlgebra.Generic.PolyRing{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}: Polynomial ring Q(p,x)[λ] for characteristic polynomial of Df0\nchi::AbstractAlgebra.Generic.Poly{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}: Characteristic polynomial of Df0\nM::Vector{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}: Components of the system on slow manifold\nx0::Vector{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}: Non-singular point in the irreducible component of V(f0) containing the slow manifold\nP::AbstractAlgebra.Generic.MatSpaceElem{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}: Matrix with rational functions, such that f0=P⋅Psi\nPsi::AbstractAlgebra.Generic.MatSpaceElem{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}: Vector with polynomials, such that f0=P⋅Psi\nDPsi::AbstractAlgebra.Generic.MatSpaceElem{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}: Jacobian of Psi\nsuccess::Vector{Bool}: Indicates whether slow manifold M, non-singular point x0 and product decomposition f0=P⋅Psi have been set successfully to allow the computation of the reduced system\nidx_components::Vector{Bool}: Boolean indices of components that determine the flow on the slow manifold\ng_raw::Vector{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}: Reduced system in general form (before substituting variables according to the slow manifold)\ng::Vector{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}: Reduced system on the slow manifold\nreduction_cached::Vector{Bool}: Whether g and g_raw are already computed\n\n\n\n\n\n","category":"type"},{"location":"api/#TikhonovFenichelReductions.Reduction-Tuple{ReductionProblem, Vector{Bool}, Union{Variety, Vector{Nemo.QQMPolyRingElem}}, Vector{<:AbstractAlgebra.RingElem}}","page":"API","title":"TikhonovFenichelReductions.Reduction","text":"Reduction(\n    problem::ReductionProblem,\n    sf_separation::Vector{Bool},\n    V::Union{Variety, Vector{Nemo.QQMPolyRingElem}},\n    M::Vector{<:AbstractAlgebra.RingElem};\n    s\n) -> Reduction\n\n\nConvenience function that constructs an object of type Reduction and calls set_manifold! and set_decomposition!.\n\nArguments\n\nproblem: Reduction problem type holding information on system and dimension of reduction.\nsf_separation: Boolean index indicating slow-fast separation of rates (0: small, 1: large).\nV: Generators of affine variety corresponding to the the slow manifold \nM: Slow manifold in explicit form\ns::Int: (optional) Dimension of slow manifold. Can be specified if a reduction corresponding to a TFPV for dimension different from problem.s should be considered (e.g. for manually computing a reduction for a given slow-fast separation that is not necessarily obtained via tfpvs_and_varieties).\n\nSee also: set_manifold! set_decomposition! tfpvs_and_varieties\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.Reduction-Tuple{ReductionProblem, Vector{Bool}}","page":"API","title":"TikhonovFenichelReductions.Reduction","text":"Reduction(\n    problem::ReductionProblem,\n    sf_separation::Vector{Bool};\n    s\n) -> Reduction\n\n\nConstructor for Reduction Type.\n\nArguments\n\nproblem: Reduction problem type holding information on system and dimension of reduction.\nsf_separation: Boolean index indicating slow-fast separation of rates (0: small, 1: large).\ns::Int: (optional) Dimension of slow manifold. Can be specified if a reduction corresponding to a TFPV for dimension different from problem.s should be considered (e.g. for manually computing a reduction for a given slow-fast separation that is not necessarily obtained via tfpvs_and_varieties).\n\nSee also: set_manifold! set_decomposition!\n\n\n\n\n\n","category":"method"},{"location":"api/#Computing-Multiple-Tikhonov-Fenichel-Reductions-Simultaneously","page":"API","title":"Computing Multiple Tikhonov-Fenichel Reductions Simultaneously","text":"","category":"section"},{"location":"api/#TikhonovFenichelReductions.compute_all_reductions-Tuple{ReductionProblem, Vector{Vector{Bool}}, Vector{Vector{Variety}}, Union{Vector{Vector{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}}, Vector{Vector{Nemo.QQMPolyRingElem}}}}","page":"API","title":"TikhonovFenichelReductions.compute_all_reductions","text":"compute_all_reductions(\n    problem::ReductionProblem,\n    sf_separations::Vector{Vector{Bool}},\n    varieties::Vector{Vector{Variety}},\n    M::Union{Vector{Vector{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}}, Vector{Vector{Nemo.QQMPolyRingElem}}};\n    print\n) -> Tuple{Vector{Vector{Reduction}}, Vector{Vector{Tuple{Int64, Int64}}}}\n\n\nCompute reductions for TFPVs sf_separations onto each of the explicitly given slow manifolds in M. Returns the reductions R in the same format as varieties and indices idx such that M[k] corresponds to varieties[i][j] and R[i][j] for each (i,j) in idx[k].\n\nDescription\n\nAll possible choices of slow manifolds can be obtained with unique_varieties. For each of these (that one is interested in), a parameterized form, i.e. the slow manifold in phase space defined by the remaining components of the system, must be provided. In most cases this can be obtained with get_explicit_manifold. The backwards step, i.e. finding all manifolds for which this is an explicit description, is then done automatically with find_varieties.\n\nSee also: unique_varieties, compute_all_reductions, compute_reduction!, Reduction, set_manifold!, set_decomposition!\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.find_varieties-Tuple{ReductionProblem, Vector{Vector{Variety}}, Union{Vector{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}, Vector{Nemo.QQMPolyRingElem}}}","page":"API","title":"TikhonovFenichelReductions.find_varieties","text":"find_varieties(\n    problem::ReductionProblem,\n    varieties::Vector{Vector{Variety}},\n    M::Union{Vector{AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem}}, Vector{Nemo.QQMPolyRingElem}}\n) -> Vector{Tuple{Int64, Int64}}\n\n\nFind all varieties as returned by tfpvs_and_varieties for a given explicit manifold, i.e. a parametric description as a vector with the same size as problem.x.\n\nSee also: compute_all_reductions\n\n\n\n\n\n","category":"method"},{"location":"api/#TikhonovFenichelReductions.unique_varieties-Tuple{ReductionProblem, Vector{Vector{Variety}}}","page":"API","title":"TikhonovFenichelReductions.unique_varieties","text":"unique_varieties(\n    problem::ReductionProblem,\n    V::Vector{Vector{Variety}}\n) -> Vector\n\n\nObtain all possible choices of slow manifolds with dimension s given the manifolds as returned by tfpvs_and_varieties.\n\nSee also: tfpvs_and_varieties\n\n\n\n\n\n","category":"method"},{"location":"api/#Output","page":"API","title":"Output","text":"","category":"section"},{"location":"api/#TikhonovFenichelReductions.print_system","page":"API","title":"TikhonovFenichelReductions.print_system","text":"print_system([io::IO,] problem::ReductionProblem; latex::Bool=false)\n\nPrint input ODE system.\n\n\n\n\n\n","category":"function"},{"location":"api/#TikhonovFenichelReductions.print_results","page":"API","title":"TikhonovFenichelReductions.print_results","text":"print_results(\n  [io::IO,]\n  problem::ReductionProblem,\n  sf_separations::Vector{Vector{Bool}},\n  V::Vector{Vector{Variety}};\n  idx::Union{AbstractVector{Int}, Vector{Bool}}=1:length(V)\n)\n\nPrint slow-fast separations that are TFPVs and generators for the corresponding irreducible components of V(f0) together with their Krull dimension as stored in Variety object.\n\nArguments\n\nproblem: ReductionProblem \nsf_separations: Boolean indices defining all TFPVs π⁺ that are slow-fast separations (0: slow, 1: fast).\nV: Generators for the irreducible component of the affine varietiy V(f(⋅,π⁺)) for each slow-fast separation and their respective dimension.\nidx: (optional) index vector to include only certain TFPVs (boolean or numeric)\n\nSee also: tfpvs_and_varieties, print_tfpvs, print_varieties\n\n\n\n\n\n","category":"function"},{"location":"api/#TikhonovFenichelReductions.print_tfpvs","page":"API","title":"TikhonovFenichelReductions.print_tfpvs","text":"print_tfpvs(\n  [io::IO,] \n  problem::ReductionProblem,\n  sf_separations::Vector{Vector{Bool}}; \n  latex::Bool=false,\n  idx::Union{AbstractVector{Int}, Vector{Bool}}=1:length(sf_separations)\n)\n\nPrint slow-fast separations to terminal or use latex=true to print LaTeX instead. Optionally only print subset defined by (boolean or numeric) index set idx.\n\n\n\n\n\n","category":"function"},{"location":"api/#TikhonovFenichelReductions.print_varieties","page":"API","title":"TikhonovFenichelReductions.print_varieties","text":"print_varieties(\n  [io::IO,]\n  V::Vector{Vector{Variety}};\n  latex::Bool=false,\n  idx::Union{AbstractVector{Int}, Vector{Bool}}=1:length(V)\n)\n\nPrint generators of ideals corresponding to the irreducible components of varieties V(f0) for TFPV candidates and their dimension as returned by tfpvs_and_varieties (these are wrapped in the type Variety). Use keyword argument latex=true to print LaTeX code instead.\n\nSee also: tfpvs_and_varieties, print_tfpvs, print_results\n\n\n\n\n\n","category":"function"},{"location":"api/#TikhonovFenichelReductions.print_reduced_system","page":"API","title":"TikhonovFenichelReductions.print_reduced_system","text":"print_reduced_system(\n  [io::IO,] \n  reduction::Reduction; \n  rewrite::Bool=true,\n  factor::Bool=false, \n  latex::Bool=false,\n  local_coordinates::Bool=true\n)\n\nPrint the reduced system (after compute_reduction! has been called successfully on the Reduction object).  If the slow manifold was successfully specified, this returns the system on the slow manifold.  If  local_coordinates=true, the reduced system is only given in s-dimensions (i.e. the local coordinates on the slow manifold).  If the reduction could be computed but the slow manifold was not set successfully, the reduced system is shown in the original phase space.\n\nArguments\n\nreduction: Reduction holding the reduced system \nrewrite: Whether the RHS should be decomposed into polynomial and rational part (default is true), see rewrite_rational\nfactor: Whether the polynomial parts should be factorized\nlatex: Whether to print latex string \nlocal_coordinates: Whether to present reduced system in local coordinates on slow manifold (i.e. as s dimensional ODE system)\n\nSee also: rewrite_rational, print_tfpvs, print_varieties\n\n\n\n\n\n","category":"function"},{"location":"api/#TikhonovFenichelReductions.print_slow_fast","page":"API","title":"TikhonovFenichelReductions.print_slow_fast","text":"print_slow_fast([io::IO,] reduction::Reduction; latex::Bool=false)\n\nPrint slow and fast parameters.\n\n\n\n\n\n","category":"function"},{"location":"api/#TikhonovFenichelReductions.rewrite_rational","page":"API","title":"TikhonovFenichelReductions.rewrite_rational","text":"rewrite_rational(\n    term::AbstractAlgebra.Generic.FracFieldElem{Nemo.QQMPolyRingElem};\n    factor\n) -> Tuple{Nemo.QQMPolyRingElem, Nemo.QQMPolyRingElem, Nemo.QQMPolyRingElem}\n\n\nDecompose a rational function f = p/q into polynomial and rational part, i.e. return f = h + r/q, where p,q,h,r are polynomials.\n\nArguments\n\nfactor: Whether all polynomials should be factorized (default is false)\n\nSee also: print_reduced_system\n\n\n\n\n\n","category":"function"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"A. Goeke and S. Walcher. Quasi-Steady State: Searching for and Utilizing Small Parameters. In: Recent Trends in Dynamical Systems, Vol. 35, edited by A. Johann, H.-P. Kruse, F. Rupp and S. Schmitz (Springer Basel, 2013); pp. 153–178.\n\n\n\nA. Goeke and S. Walcher. A Constructive Approach to Quasi-Steady State Reductions. Journal of Mathematical Chemistry 52, 2596–2626 (2014).\n\n\n\nA. Goeke, S. Walcher and E. Zerz. Determining \"Small Parameters\" for Quasi-Steady State. Journal of Differential Equations 259, 1149–1180 (2015).\n\n\n\nA. N. Tikhonov. Systems of differential equations containing small parameters in the derivatives. Matematicheskii sbornik 73, 575–586 (1952).\n\n\n\nN. Fenichel. Geometric Singular Perturbation Theory for Ordinary Differential Equations. Journal of Differential Equations 31, 53–98 (1979).\n\n\n\nF. Verhulst. Singular Perturbation Methods for Slow–Fast Dynamics. Nonlinear Dynamics 50, 747–753 (2007).\n\n\n\nN. Kruff, C. Lax, V. Liebscher and S. Walcher. The Rosenzweig–MacArthur System via Reduction of an Individual Based Model. Journal of Mathematical Biology 78, 413–439 (2019).\n\n\n\n","category":"page"},{"location":"#TikhonovFenichelReductions.jl","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"","category":"section"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"A Julia package for finding Tikhonov-Fenichel Parameter Values (TFPVs) for polynomial ODE systems and computing the corresponding reductions as described in [1–3].","category":"page"},{"location":"#Overview","page":"TikhonovFenichelReductions.jl","title":"Overview","text":"","category":"section"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"The general framework for this package is singular perturbation theory. More precisely, we consider a system of ODEs in the form ","category":"page"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"dotx = f(xpi varepsilon) = f^(0)(xpi) + varepsilon f^(1)(xpi) ","category":"page"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"where xin U subseteqmathbbR^n, piinPisubseteqmathbbR^m, f in mathbbRxpi is polynomial and varepsilon geq 0 is a small parameter.  The results from [1–3] allow us to compute a reduced system for varepsilon to 0 in the sense of Tikhonov [4] and Fenichel [5] using methods from commutative algebra and algebraic geometry.  This is often called time scale separation and is related to, but more flexible than, model reduction via quasi-stready state assumptions.","category":"page"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"TikhonovFenichelReductions.jl provides procedures for finding all possible TFPV candidates that yield a reduction in the sense of Tikhonov's theorem (see [6]) and functions to simplify the computation of the corresponding reduced systems. Note that this approach yields all possible timescale separations of rates and not just components as in the classical approach.","category":"page"},{"location":"#Finding-TFPV-candidates","page":"TikhonovFenichelReductions.jl","title":"Finding TFPV candidates","text":"","category":"section"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"To find TFPV candidates admitting a reduced system of dimension s with TikhonovFenichelReductions.jl, one needs to create an instance of type ReductionProblem holding all relevant information.  Then, there are two different approaches (see Getting Started for a more dertailed practical discussion).","category":"page"},{"location":"#Slow-Fast-Separations","page":"TikhonovFenichelReductions.jl","title":"Slow-Fast Separations","text":"","category":"section"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"A slow-fast separation of rates with base parameters pi_i is defined by an index set Ssubset1dotsm, where (pi_i)_iin S are the small parameters corresponding to slow processes.  We always denote a slow-fast separation of rates by tildepi=tildepi(varepsilonpi) with ","category":"page"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"tildepi_i = begincases\nvarepsilon pi_i  i in S  pi_i  i in S^complement\nendcases","category":"page"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"or pi^star = tildepi(0pi). Most TFPVs we are interested in are of this type, because they directly relate to a slow-fast separation of processes. However, there might exist TFPVs that are characterized by more complicated expressions in the original parameters being small (see the next section).  The function tfpvs_and_varieties yields all slow-fast separations of rates that are TFPVs and the corresponding varieties.  Roughly speaking, this checks for all possible slow-fast separations of rates whether there exists an irreducible component of the affine variety mathcalV(f^(0)) with dimension s, since these correspond to the potential slow manifolds on which a reduction is defined. Additionally, we use a condition on the Jacobian D_1f^(0) to filter out potential candidates.  Afterwards, it only remains to check whether the slow manifold can be given in parameterized form as a subset of mathbbR^n.  With this, one can then compute the reduced system.","category":"page"},{"location":"#All-TFPVs","page":"TikhonovFenichelReductions.jl","title":"All TFPVs","text":"","category":"section"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"To get all possible TFPVs, we consider necessary conditions concerning D_1 f and f – namely the existence of a point x_0inmathbbR^n for which f(x_0pi^star) and the determinant of each ktimes k minor of D_1 f(x_0pi^star) vanish for kn-s. These are polynomial expressions and we consider the ideal I generated by them.  Note, that the affine variety of an ideal is the same as the variety of any generating set of I.  Therefore we can consider properties of I instead of the original polynomial conditions (one can think of I as the set of polynomial consequences of the generators). There might be several slow manifolds for each pi^star, wherefore we consider conditions only on the parameters.  To do this, we compute the elimination ideal IcapmathbbRpi.  The elimination ideal is generated by GcapmathbbRpi, where G is a Gröbner basis of I with an elimination ordering for x. Then, every TFPV must result in the vanishing of each polynomial in the set G, because one always has mathcalV(I) subseteq mathcalV(IcapmathbbRpi). Thus, we may obtain more complicated expressions in the parameters that can be considered small parameters (instead of just slow-fast separations of rates). GcapmathbbRpi can be computed by calling tfpvs_groebner.  Given a TFPV defined by rational expressions, one can rewrite the original system with a new parameter equal to this expression, which makes it a slow-fast separation of rates.  Then, the approach discussed above becomes applicable allowing us to compute the reduced system.","category":"page"},{"location":"#Computing-a-Reduced-System","page":"TikhonovFenichelReductions.jl","title":"Computing a Reduced System","text":"","category":"section"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"To compute a reduced system, there must exist a non-singular point x_0inmathcalV(f^(0)), such that the irreducible component of mathcalV(f^(0)) containing x_0 has dimension s.  We define r=n-s. Then, one needs to find a product decomposition, i.e. psi(x)inmathbbR(x)^rtimes1 and P(x)inmathbbR^ntimes r admitting","category":"page"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"f^(0)(x) = P(x)psi(x)","category":"page"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"such that textuprankP(x_0) = textuprankDpsi(x_0) = r and ","category":"page"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"mathcalV(f^(0)) cap mathcalU_x_0 = mathcalV(psi) cap mathcalU_x_0","category":"page"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"for an open Zariski neighbourhood  mathcalU_x_0. Then, the reduced system in the sense of Tikhonov is given as ","category":"page"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"dotx = left1_n - P(x)A(x)^-1 Dpsi(x)right f^(1)(x)","category":"page"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"The procedures to compute a reduced system with TikhonovFenichelReductions.jl are demonstrated in the Getting Started section.","category":"page"},{"location":"#Dependencies","page":"TikhonovFenichelReductions.jl","title":"Dependencies","text":"","category":"section"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"This packages only works due to the great Oscar.jl project.","category":"page"},{"location":"#License","page":"TikhonovFenichelReductions.jl","title":"License","text":"","category":"section"},{"location":"","page":"TikhonovFenichelReductions.jl","title":"TikhonovFenichelReductions.jl","text":"GNU GENERAL PUBLIC LICENSE, Version 3 or later (see LICENSE)","category":"page"}]
}
