## Demo for TikhonovFenichelReductions.jl 
#
# This example is based on:
# N. Kruff, C. Lax, V. Liebscher, and S. Walcher, ‘The Rosenzweig–MacArthur
# system via reduction of an individual based model’, J. Math. Biol., vol. 78,
# no. 1–2, pp. 413–439, Jan. 2019, doi: 10.1007/s00285-018-1278-y.

## Load packages

using TikhonovFenichelReductions
using TikhonovFenichelReductions.Oscar # optional (results in prettier printing and loads Oscar functions to Main namespace)

## Define system

# dynamic variables
x = ["B", "S", "H"]

# parameters
p = ["α", "β", "γ", "δ", "η", "ρ"]

# RHS of ODE system ẋ = f(x, p)
function f(x, p)
  B, S, H = x
  α, β, γ, δ, η, ρ = p
  return [
    ρ*B*(1-B) - α*B*H,
    -η*S + γ*B*H,
    β*S- δ*H + η*S - γ*B*H
  ]
end

# dimension of the reduced system
s = 2

# create Problem
problem = ReductionProblem(f, x, p, s)

# find slow-fast separations that are TFPVs
sf_separations, V, dim_V = tfpv_candidates(problem);

# print slow-fast separations and corresponding slow manifolds with their dimension
print_tfpv(problem, sf_separations)
print_varieties(V, dim_V)

print_results(problem, sf_separations, V, dim_V)

# find all general TFPVs using necessary conditions on the determinants of D₁f
# G is a Gröbner basis for this, such that every TFPV of dimension s lies in V(G)
G = tfpv_candidates_groebner(problem)

# Typically, the computation of the Gröbner basis in tfpv_candidates_groebner is
# much slower than the computation for slow-fast fast separations in
# tfpv_candidates, which only computes the irreducible components of V(f(⋅,p_sf))
# and their dimension via a minimal primary computation and the Krull
# dimensions for the corresponding ideals. However, there might exist TFPVs
# which are not slow-fast separations. Here, this is not the case, because G is
# a monomial ideal.

# all TFPVs lie in one of the irreducible components generated by these ideals:
primary_decomposition(ideal(G))

## Make variables and parameters available in Main namespace

B, S, H = system_components(problem)
α, β, γ, δ, η, ρ = system_parameters(problem)

## Compute a reduced system

# The Rosenzweig-MaxArthur system corresponds to the TFPV candidate 15 (See section 3.3 in the paper).
# instantiate reduction 
reduction = Reduction(problem, sf_separations[15])

# look at the variety that contains the slow manifold
V[15] # => M₀ = {(B,S,0) | B,S ∈ ℝ}
dim_V[15] # has dimension 2 
set_manifold!(reduction, [B, S, 0])

# define product decomposion f0 = P⋅Psi (can be done via specifying Psi with V(Psi) = V(f⁰) in this case)
set_decomposition!(reduction, [H])

# compute the reduced system
compute_reduction!(reduction);

# display reduced system in repl 
print_reduced_system(reduction)
print_reduced_system(reduction; factor=true)

# check if g as the RHS of the reduced system is the same as in the paper 
dBdt = ρ*B*(1-B) - α*(η + β)*B*S//(δ + γ*B)
dSdt = -η*S + γ*(η + β)*B*S//(δ + γ*B)
all(iszero.(reduction.g .- [dBdt, dSdt])) 

# print to latex 

# slow manifold is attractive if all non-zero eigenvalues of Df at x0 have negative real part
jacobian_tfpv_at_x0(reduction)

## Compute multiple reductions at once

# Get all unique slow manifolds for which reductions can exist
V_unique = unique_slow_manifolds(problem, V, dim_V)

# Get all indices for TFPVs with a reduction onto V(H)
idx_similar = similar_reductions(V, V_unique[4])

# compute reductions for all TFPVs that have the same manifold (we can choose the same P-Ψ decomposion for f⁰)
R = compute_bulk_reductions(problem, sf_separations, idx_similar, V_unique[4], [B,S,0]);

# Access the `Reduction` object with the indices as in `idx_similar`
reduction_3 = R[3]
